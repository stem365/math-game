{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleSubmit","event","totalCount","inputValue","correctValue","correctCount","correctLabel","correctLabelColor","setState","inputGiven","preventDefault","handleChange","target","value","handleContinueClick","textInputRef","current","getRandomNumber","Math","floor","random","showCalculationTask","state","number1","number2","String","React","createRef","correctLabelLayout","correctResultLayout","continueButtonLayout","this","style","lineHeight","color","Button","variant","onClick","className","onSubmit","ref","type","onChange","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RAiIeA,G,wBA1Hb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAeRC,aAAe,SAACC,GACd,EAAKC,aACD,EAAKC,aAAe,EAAKC,cAC3B,EAAKC,eACL,EAAKC,aAAe,WACpB,EAAKC,kBAAoB,UAEzB,EAAKD,aAAe,SACpB,EAAKC,kBAAoB,OAE3B,EAAKC,SAAS,CAAEC,YAAY,IAC5BR,EAAMS,kBA3BW,EA8BnBC,aAAe,SAACV,GACd,EAAKE,WAAaF,EAAMW,OAAOC,OA/Bd,EAkCnBC,oBAAsB,SAACb,GAErB,EAAKc,aAAaC,QAAQH,MAAQ,GAElC,EAAKL,SAAS,CAAEC,YAAY,KAtCX,EAyCnBQ,gBAAkB,WAChB,OAAOC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,GA1CvB,EA6CnBC,oBAAsB,WAOpB,OALK,EAAKC,MAAMb,aACd,EAAKc,QAAU,EAAKN,kBACpB,EAAKO,QAAU,EAAKP,kBACpB,EAAKb,aAAeqB,OAAO,EAAKF,QAAU,EAAKC,UAEzC,2BAAI,EAAKD,QAAU,SAAY,EAAKC,UAlD5C,EAAKF,MAAQ,CACXb,YAAY,GAEd,EAAKN,WAAa,GAClB,EAAKY,aAAeW,IAAMC,YAC1B,EAAKzB,WAAa,EAClB,EAAKG,aAAe,EACpB,EAAKkB,QAAU,EACf,EAAKC,QAAU,EACf,EAAKpB,aAAe,GACpB,EAAKE,aAAe,GACpB,EAAKC,kBAAoB,GAbR,E,sEAyDjB,IAAIqB,EAAqB,GACrBC,EAAsB,GACtBC,EAAuB,GA0B3B,OAzB6B,GAAzBC,KAAKT,MAAMb,aACbmB,EACE,yBAAKI,MAAO,CAACC,WAAY,IACvB,gCACE,0BAAMC,MAAOH,KAAKxB,mBACfwB,KAAKzB,gBAKVyB,KAAK5B,aAAe4B,KAAK3B,eAC3ByB,EACE,yBAAMG,MAAO,CAACC,WAAY,IAA1B,yBACyBF,KAAK3B,eAGlC0B,EACE,yBAAME,MAAO,CAACC,WAAY,IACxB,kBAACE,EAAA,EAAD,CACEC,QAAQ,UACRC,QAASN,KAAKjB,qBAFhB,YAIY,MAIhB,6BACE,4BAAQwB,UAAU,cAChB,uBAAGN,MAAO,CAACC,WAAY,IACrB,gCAASF,KAAK1B,aAAd,OAAgC0B,KAAK7B,WAArC,cAEF,wCAGA,2BACG6B,KAAKV,uBAER,0BAAMkB,SAAUR,KAAK/B,cACnB,2BACEwC,IAAKT,KAAKhB,aACV0B,KAAK,OACLC,SAAUX,KAAKpB,aAEfgC,SAAUZ,KAAKT,MAAMb,aAEvB,2BACEgC,KAAK,SACL5B,MAAM,OAEN8B,SAAUZ,KAAKT,MAAMb,cAIxBmB,EACAC,EACAC,Q,GArHOJ,IAAMkB,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.62b13994.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputGiven: false\n    };\n    this.inputValue = ''\n    this.textInputRef = React.createRef()\n    this.totalCount = 0\n    this.correctCount = 0\n    this.number1 = 0\n    this.number2 = 0\n    this.correctValue = ''\n    this.correctLabel = ''\n    this.correctLabelColor = ''\n  }\n\n  handleSubmit = (event) => {\n    this.totalCount++\n    if (this.inputValue === this.correctValue) {\n      this.correctCount++\n      this.correctLabel = 'Correct!'\n      this.correctLabelColor = 'green'\n    } else {\n      this.correctLabel = 'Wrong!'\n      this.correctLabelColor = 'red'\n    }\n    this.setState({ inputGiven: true })\n    event.preventDefault();\n  }\n\n  handleChange = (event) => {\n    this.inputValue = event.target.value\n  }\n\n  handleContinueClick = (event) => {\n    // reset text input field\n    this.textInputRef.current.value = ''\n    // render the UI: now user should give input again\n    this.setState({ inputGiven: false })\n  }\n\n  getRandomNumber = () => {\n    return Math.floor(Math.random() * 10) + 1\n  }\n\n  showCalculationTask = () => {\n    // only show a new calculation, when waiting for a new user input\n    if (!this.state.inputGiven) {\n      this.number1 = this.getRandomNumber()\n      this.number2 = this.getRandomNumber()\n      this.correctValue = String(this.number1 * this.number2)\n    }\n    return (<b>{this.number1 + ' \\u00d7 '+ this.number2}</b>)\n  }\n\n  render() {\n    // show continue button and correct labels only, if user has given input\n    let correctLabelLayout = ''\n    let correctResultLayout = ''\n    let continueButtonLayout = ''\n    if (this.state.inputGiven == true) {\n      correctLabelLayout =\n        <div style={{lineHeight: 4}}>\n          <strong>\n            <font color={this.correctLabelColor}>\n              {this.correctLabel}\n            </font>\n          </strong>\n        </div>\n      // show 'correct result is' text only when user's answer was wrong\n      if (this.inputValue !== this.correctValue) {\n        correctResultLayout =\n          <div  style={{lineHeight: 2}}>\n            The correct answer is {this.correctValue}\n          </div>\n      }\n      continueButtonLayout =\n        <div  style={{lineHeight: 2}}>\n          <Button\n            variant=\"primary\"\n            onClick={this.handleContinueClick}>\n            Continue\n            </Button>{' '}\n        </div>\n    }\n    return (\n      <div>\n        <header className=\"App-header\">\n          <p style={{lineHeight: 4}}>\n            <strong>{this.correctCount} of {this.totalCount} correct!</strong>\n        </p>\n          <p>\n            Calculate\n        </p>\n          <p>\n            {this.showCalculationTask()}\n          </p>\n          <form onSubmit={this.handleSubmit}>\n            <input\n              ref={this.textInputRef}\n              type='text'\n              onChange={this.handleChange}\n              // disable text input, when user has just given input\n              disabled={this.state.inputGiven}\n            />\n            <input\n              type='submit'\n              value='Done'\n              // disable submit button, when user has just given input\n              disabled={this.state.inputGiven}\n            />\n            {/* <input type=\"reset\" defaultValue=\"Reset\" /> */}\n          </form>\n          {correctLabelLayout}\n          {correctResultLayout}\n          {continueButtonLayout}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}